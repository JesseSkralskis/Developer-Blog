{"version":3,"sources":["components/Header.js","components/ExpenseForm.js","actions/expenses.js","components/AddExpensePage.js","components/ExpenseListItem.js","selectors/expenses.js","components/ExpenseList.js","components/ExpenseListFilters.js","actions/filters.js","components/DashBoard.js","components/Edit.js","components/Help.js","components/NotFoundPage.js","routes/AppRouter.js","App.js","serviceWorker.js","reducers/expenses.js","reducers/filters.js","index.js","store/configStore.js"],"names":["Header","exact","activeClassName","to","ExpenseForm","moment","props","handleDescriptionChange","e","description","target","value","setState","handleNoteChange","note","onAmountChange","amount","match","onFocusChange","focused","calenderFocused","handleDateChange","createdAt","handleOnSubmit","preventDefault","state","error","onSubmit","id","parseFloat","valueOf","expense","toString","this","type","placeholder","autoFocus","onChange","date","onDateChange","numberOfMonths","isOutsideRange","Component","addExpense","expenses","uuid","AddExpensePage","history","push","React","connect","undefined","dispatch","ExpenseListItem","numeral","format","text","sortBy","startDate","endDate","filter","createdAtMoment","startDateMatch","isSameOrBefore","endDateMatch","isSameOrAfter","textMatch","toLowerCase","includes","sort","a","b","console","log","selectExpenses","filters","length","map","key","ExpenseListFilters","onDatesChange","setStartDate","setEndDate","onTextChange","setTextFilter","onSortByChange","sortByDate","sortByAmount","startDateId","endDateId","focusedInput","showClearDates","DashBoard","Edit","editExpense","onRemove","removeExpense","onClick","find","params","updates","data","Help","NotFoundPage","AppRouter","path","component","App","Boolean","window","location","hostname","expensesReducerDefaultState","expensesReducer","action","filterReducerDefaultState","startOf","endOf","store","createStore","combineReducers","filterReducer","__REDUX_DEVTOOLS_EXTENSION__","getState","visibleExpense","getVisibleExpenses","jsx","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.adbfba90.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink,} from 'react-router-dom'\n\n\n\n\n\n\nconst Header = () => (\n  //navlink allows gives us props that help us style easily the\n  //nav we are on using activeclassname and the styling is-active\n  <header>\n    <h1>Expensify</h1>\n    <NavLink exact={true} activeClassName=\"is-active\" to=\"/\">\n      Home\n    </NavLink>\n    <NavLink activeClassName=\"is-active\" to=\"/create\">\n      create\n    </NavLink>\n     \n    \n  </header>\n);\n\nexport default Header;","import React, { Component } from 'react';\n//needed to make react-dates work\nimport \"react-dates/initialize\";\n//named export from the react dates library\n\nimport { SingleDatePicker } from 'react-dates';\n\n//for docu go to https://github.com/airbnb/react-dates\n//tools used to manipulate date:\n//1.moment 2. air b and b react-dates\nimport moment from 'moment';\n //api for this javascript way is dog shit so its a no go\n// const date = new Date();\n//so we use moment\n//for documentation on patterns go to\n//https://momentjs.com/docs/#/displaying/\nconst now = moment();\n\n\n\n\nexport default class ExpenseForm extends Component {\n                 //we need local compomnent state to track all of the changes in these inputs\n                 //only when the user submits the form will we actually do something with the info\n  constructor(props) {\n    super(props);\n   \n    this.state = {\n      //because we want to populate the fields if the user has chosen to edit\n      //we use turnerary logic that checks if the expense object has been passed from the parent\n      //if it has it means the user is editing so will populate \n      description: props.expense ? props.expense.description : \"\",\n      note: props.expense ? props.expense.note : \"\",\n    //divide by 100 so the field holds the proper decimal situation\n      amount: props.expense ? (props.expense.amount / 100).toString() : \"\",\n      //to poopulate the correct date we call moment with the created at paramater\n      createdAt: props.expense ? moment(props.expense.createdAt) : moment(),\n      calenderFocused: false,\n      error: \"\"\n    };\n  }\n                //  state = {\n                //    description: \"\",\n                //    note: \"\",\n                //    amount: \"\",\n                //   createdAt: moment(),\n                //    calenderFocused: false,\n                //    error: ''\n                //  };\n                 //create an event handler function\n                 handleDescriptionChange = e => {\n                   const description = e.target.value;\n                   this.setState(() => ({\n                     description\n                   }));\n                 };\n                 handleNoteChange = e => {\n                   const note = e.target.value;\n                   this.setState(() => ({\n                     note\n                   }));\n                 };\n\n    onAmountChange = e => {\n                   const amount = e.target.value;\n                   //function that adds restrictions to inputs by checking if input value matches\n                   //regex expression\n                   if ( !amount || amount.match(/^\\d{1,}(\\.\\d{0,2})?$/)) {\n                     this.setState(() => ({\n                       amount\n                     }));\n                   } else {\n                   }\n    };\n\n    onFocusChange = ({focused}) => {\n        this.setState(() => ({\n            calenderFocused: focused\n        }));\n    }\n    \n    \n    \n    \n  handleDateChange = createdAt => {\n    if (createdAt) {\n      this.setState(() => ({\n        createdAt\n      }));\n    }\n  }\n  \n  handleOnSubmit = (e) => {\n    //on submit need to do this so page doesnt do full refresh handles with just javascript\n    e.preventDefault();\n    if (!this.state.description || !this.state.amount) {\n      this.setState(() => ({\n        error: 'you need to fill out the description or amount field'\n      }))\n      \n    } else {\n      this.setState(() => ({\n        error: \"\"\n      }));\n      //calling the function that was passed from parent with the object from all the state from this child component\n      this.props.onSubmit({\n        id: this.state.id,\n        description: this.state.description,\n        //because amount is in string form we must parse it also multiply by 100 \n        //so we can negate that it is in cents\n        amount: parseFloat(this.state.amount, 10) * 100,\n        //because the state is set to moment we need to parse this back to its og form\n        createdAt: this.state.createdAt.valueOf(),\n        note: this.state.note\n        \n\n      })\n    }\n    \n  }\n                 render() {\n                   return (\n                     <div>\n                       {this.state.error && <p>{this.state.error}</p>} \n                       <form onSubmit={this.handleOnSubmit}>\n                         <input\n                           type=\"text\"\n                           placeholder=\"description\"\n                           //automatically places the cursor on this input\n                           autoFocus\n                           value={this.state.description}\n                           onChange={this.handleDescriptionChange}\n                         />\n                         {/* becuse type number allows many decimalplaces we must use text */}\n                         <input\n                           type=\"text\"\n                           placeholder=\"amount\"\n                           value={this.state.amount}\n                           onChange={this.onAmountChange}\n                         />\n\n                         <SingleDatePicker\n                           date={this.state.createdAt}\n                           //similr to other event handlers but difference is\n                           //this one is called by our third party library\n                           onDateChange={this.handleDateChange}\n                           focused={this.state.calenderFocused}\n                           onFocusChange={this.onFocusChange}\n                           //custumization\n                           //docu https://github.com/airbnb/react-dates\n                           numberOfMonths={1}\n                           isOutsideRange={() => {\n                             return false;\n                           }}\n                         />\n\n                         <textarea\n                           placeholder=\"add a note for your expense (optional)\"\n                           value={this.state.note}\n                           onChange={this.handleNoteChange}\n                         />\n                         <button>Add Expense</button>\n                       </form>\n                     </div>\n                   );\n                 }\n               }\n","import uuid from 'uuid'\n\n//ADD_EXPENSE\n//use named export\nexport const addExpense = ({\n  description = \"\",\n  note = \"\",\n  amount = 0,\n  createdAt = 0\n} = {}) => ({\n  type: \"ADD_EXPENSE\",\n  expenses: {\n    id: uuid(),\n    description,\n    note,\n    amount,\n    createdAt\n  }\n});\n\n//REMOVE_EXPENSE\n\nexport const removeExpense = ({ id } = {}) => {\n\n\n  \n  return {\n \n    type: \"REMOVE_EXPENSE\",\n    id\n  };\n};\n//EDIT_EXPENSE\n\nexport const editExpense = ({ id }, updates) => ({\n  type: \"EDIT_EXPENSE\",\n  id,\n  updates\n});\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport ExpenseForm from \"./ExpenseForm\";\nimport { addExpense } from '../actions/expenses'\n//this component which is the parent to the expense form passes a prop down to its child\n//that is a function that will take the expense info that a user fills out\n//and then dispatch the adExpense action on that data which will change the redux store to add\n//to the array of expenses\n\nexport class AddExpensePage extends React.Component {\n  \n  onSubmit = (expense) => {\n    \n    //because of mapDispatchToProps we can now abtract our dispatcher functions away from the component the code which will make it testable\n    // props.dispatch(addExpense(expense));\n    this.props.onSubmit(expense);\n    //react router has props handed to it in this case we use push to redirect\n   this.props.history.push(\"/\");\n  };\n  render() {\n    \n    \n    return (\n      <div>\n        <h1>Add Expense</h1>\n\n        <ExpenseForm\n          //passing this prop down to the child which is the form\n          //now this function is no longer \"inline\" meaning it doesnt get called every render\n          onSubmit={this.onSubmit}\n        />\n      </div>\n    );\n  }\n}\n\n\n// connect seccond argument \nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: (expense) => dispatch(addExpense(expense))\n});\n\n\nexport default connect(undefined , mapDispatchToProps)(AddExpensePage);\n","import React from 'react'\nimport { NavLink } from \"react-router-dom\";\nimport moment from 'moment';\nimport numeral from 'numeral';\n\n \n\n\n\n//this takes the props from expenseList (destructerted) and placesd them as needed\nconst ExpenseListItem = ({  id, description, amount, createdAt }) => (\n  <div>\n    <NavLink to={`/edit/${id}`}>\n      {\" \"}\n      <h3>{description}</h3>\n    </NavLink>\n    <p>\n      {numeral(amount/100).format('$0,0.00')}\n      -\n      {moment(createdAt).format('MMMM Do, YYYY ')}\n    </p>\n    \n  </div>\n);\n   //when we add connect we get dispatch as a prop even if we do no mapToProps function\n    export default ExpenseListItem;","import moment from 'moment';\n\n\nexport default (expenses, { text, sortBy, startDate, endDate }) => {\n  //using filter on the expenses array we will return only an array where our 3 matches are true\n\n  return expenses\n    .filter(expense => {\n      const createdAtMoment = moment(expense.createdAt)\n      const startDateMatch = startDate ?startDate.isSameOrBefore(createdAtMoment,'day')  : true\n        \n      const endDateMatch = endDate ? endDate.isSameOrAfter(createdAtMoment,'day') : true\n        \n\n      const textMatch = expense.description\n        .toLowerCase()\n        .includes(text.toLowerCase());\n\n      return startDateMatch && endDateMatch && textMatch;\n    })\n    .sort((a, b) => {\n      console.log(sortBy);\n      if (sortBy === \"date\") {\n        return a.createdAt < b.createdAt ? -1 : 1;\n      } else if (sortBy === \"amount\") {\n        return a.amount > b.amount ? -1 : 1;\n      }\n    });\n};\n\n\n","import React from 'react'\nimport { connect } from 'react-redux';\nimport ExpenseListItem from './ExpenseListItem';\nimport selectExpenses from '../selectors/expenses'\n\n\n// 1. regular unconnected component\n\n//important to remember if you are connected to the store your component is reactive and will rerender\n//now wecan use the state of our store as props in the componenent\n export const ExpenseList=(props) =>{\n    return (\n        <div>\n            {/* for test we creat turneary logic to test if there are no expenses */}\n            {\n                props.expenses.length === 0 ? (\n                    <p>No expenses</p>\n                ) : (\n                     props.expenses.map((expense) => {\n              \n                //spread out al the things on expense which is all our propertys we are rendering in ListItem\n                //now ExpenseList Item has access to every individual instance with all the pairs \n                return <ExpenseListItem key={expense.id}{...expense}/>\n           })\n               \n                )\n            }\n\n           \n            \n        </div>\n    )\n}\n\n//create higher order component\n//using there react-redux api thats why expense list is outside of brackests\n//give the component a subset from the store\n//passes state into connect\n// 2. common practice create a mapping function\nconst mapStateProps = (state) => {\n    return {\n        //to get our expenses we now call our selector filter with the needed state\n        expenses: selectExpenses(state.expenses, state.filters)\n    }\n}\n//.3 export ties it all together\n//saying connect expense list with the props from the higher order function\nexport default connect(mapStateProps)(ExpenseList);\n\n\n\n","import React from 'react'\nimport { connect } from 'react-redux';\nimport { setTextFilter, sortByAmount, sortByDate,setStartDate, setEndDate } from \"../actions/filters\";\nimport { DateRangePicker } from 'react-dates';\nimport uuid from 'uuid';\n \n export class ExpenseListFilters extends React.Component{\n    \n    state = {\n        calenderFocused: null\n    };\n   \n    onFocusChange = (calenderFocused) => {\n        this.setState(() => ({\n            calenderFocused \n        }))\n        \n    }\n    onDatesChange = ({startDate, endDate}) => {\n      this.props.setStartDate(startDate);\n      this.props.setEndDate(endDate);\n    }\n   \n   \n   onTextChange = (e) => {\n     this.props.setTextFilter(e.target.value);\n   }\n   onSortByChange = (e) => {\n     if (e.target.value === \"date\") {\n       this.props.sortByDate();\n     } else if (e.target.value === \"amount\") {\n       this.props.sortByAmount();\n     }\n   }\n\n   \n    render() {\n       \n      return (\n          \n\n        <div>\n          expenseListfilters\n            {/* any change in the input fires a dispatch that updates the text in textfilter in the store */}\n            <input\n              type=\"text\"\n              value={this.props.filters.text}\n            onChange={this.onTextChange}\n            \n            />\n            {/* //how to create a pull down select menu with lowercase */}\n            <select\n              value={this.props.filters.sortBy}\n              onChange={this.onSortByChange}\n            >\n              <option value=\"date\">Date</option>\n              <option value=\"amount\">Amount</option>\n            </select>\n            <DateRangePicker\n                    startDate={this.props.filters.startDate}\n                    startDateId={'abcd5678'}\n                    endDate={this.props.filters.endDate}\n                    endDateId={'abc1235'}\n              onDatesChange={this.onDatesChange}\n                    focusedInput={this.state.calenderFocused}\n                    onFocusChange={this.onFocusChange}\n                    numberOfMonths={1}\n                    isOutsideRange={() => false}\n                    showClearDates={true}\n            />\n          </div>\n        );\n    }\n\n }\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  setTextFilter: (value) => dispatch(setTextFilter(value)),\n  sortByAmount: () => dispatch(sortByAmount()),\n  sortByDate: () => dispatch(sortByDate()),\n  setStartDate: (startDate) => dispatch(setStartDate(startDate)),\n  setEndDate: (endDate) => dispatch(setEndDate(endDate))\n    \n   \n })\n\n \nconst mapStateToProps = (state) => {\n    return {\n         filters: state.filters\n     }\n }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ExpenseListFilters);\n","//SET_TEXT_FILTER\n//use named exports\nexport const setTextFilter = (text = \"\") => ({\n  type: \"SET_TEXT_FILTER\",\n  text\n});\n//SORT_BY_DATE\n\nexport const sortByDate = () => ({\n  type: \"SORT_BY_DATE\"\n});\n//SORT_BY_AMOUNT\n\nexport const sortByAmount = () => ({\n  type: \"SORT_BY_AMOUNT\"\n});\n//SET_START_DATE\n\nexport const setStartDate = startDate => ({\n  type: \"SET_START_DATE\",\n  startDate\n});\n\n//SET_END_DATE\nexport const setEndDate = endDate => ({\n  type: \"SET_END_DATE\",\n  endDate\n});\n","import React from 'react';\nimport ExpenseList from './ExpenseList';\n\nimport ExpenseListFilters from '../components/ExpenseListFilters';\n\n\n \n//need to import the named export from redux-react to be able to get the store\n//this is the parent of expense list\n\n\n\nconst DashBoard = () => (\n   \n    <div>\n       \n        <ExpenseListFilters/>\n        <ExpenseList />\n    </div>\n)\n\n\n \nexport default DashBoard;","import React from \"react\";\nimport { connect } from 'react-redux';\nimport ExpenseForm from './ExpenseForm';\nimport { editExpense, removeExpense } from \"../actions/expenses\";\n//refactor to pull out in line functions, turn them into methods so they dont have to rerender\n// set up mapDispatchToProps 2 things\n\nexport class Edit extends React.Component{\n  \n  onSubmit = (expense) => {\n   console.log(expense)\n    this.props.editExpense(this.props.expense.id, expense);\n    this.props.history.push(\"/\");\n    \n  }\n\n  onRemove = () => {\n   this.props.removeExpense({ id: this.props.expense.id });\n    this.props.history.push(\"/\");\n  }\n  render() {\n    return (\n      <div>\n        {/* in this instance of expense form we need to populate the fields so we\n      pass some props to the child the expense match\n      and what should happen when they push the button */}\n        <ExpenseForm\n          expense={this.props.expense}\n          onSubmit={this.onSubmit}\n        />\n        <button\n          onClick={this.onRemove}\n        >\n          Remove\n        </button>\n      </div>\n    );\n  }\n}\n\n\n\n//we want to be able to pass the expense that matches the id that the user clicked on\n//so using the connect state and props we can search through the expenses array in the store\n//returning the 1 expense that matches the ids\n//then that expense object i passed up to the component through props\nconst mapToProps = (state,props) => {\n \n  return {\n    //find allows us to look through an array looking for a single item\n    expense: state.expenses.find((expense) => {\n      return expense.id === props.match.params.id\n    })\n  }\n}\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  editExpense: (id, expense) => dispatch(editExpense( id , expense)),\n  removeExpense: (data) => dispatch(removeExpense(data))\n})\n  \n\n  \n\n\nexport default connect(mapToProps,mapDispatchToProps)(Edit);\n\n\n ","import React from \"react\";\n\nconst Help = () => {\n  return <div>help</div>;\n};\n\nexport default Help;\n","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nconst NotFoundPage = () => (\n  <div>\n    404! - <Link to=\"/\">Go Back Home</Link>\n  </div>\n);\n\nexport default NotFoundPage;","import React from \"react\";\n\nimport {  Switch, BrowserRouter, Route } from \"react-router-dom\";\nimport '../styles/base.scss'\nimport Header from '../components/Header'\nimport AddExpensePage from '../components/AddExpensePage'\nimport DashBoard from '../components/DashBoard'\nimport Edit from \"../components/Edit\";\nimport Help from \"../components/Help\";\nimport NotFoundPage from '../components/NotFoundPage.js';\n\n\n\nconst AppRouter = () => (\n\n    \n    <BrowserRouter>\n    {/* if more than on route must wrap with a div */}\n    <div>\n      <Header />\n      {/* switch allows us to say if a route has no path match to print the\n      component */}\n      <Switch>\n        <Route exact={true} path=\"/\" component={DashBoard} />\n        <Route path=\"/create\" component={AddExpensePage} />\n        <Route path=\"/edit/:id\" component={Edit} />\n        <Route path=\"/help\" component={Help} />\n        <Route component={NotFoundPage} />\n      </Switch>\n    </div>\n  </BrowserRouter>\n\n);\n    \n\n \n\n\n\n\n\n\n\n\n\nexport default AppRouter;","import React from 'react';\nimport  AppRouter  from './routes/AppRouter'\nimport './App.css';\n//needed to make the date picker be styled prtoperly\nimport 'react-dates/lib/css/_datepicker.css'\n\n\n\n\n\nfunction App() {\n  return (\n    <div>\n      \n      <AppRouter />\n     \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n//Expenses Reducer\n\n//to simplify default values we creat a variable that reps it\n\nconst expensesReducerDefaultState = [];\n\nconst expensesReducer = (state = expensesReducerDefaultState, action) => {\n  switch (action.type) {\n    case \"ADD_EXPENSE\":\n      //use concat because it does not change the array\n      //better yet use spread operator\n      //meaning it will not effect the original\n      return [...state, action.expenses];\n\n    case \"REMOVE_EXPENSE\":\n     \n      return state.filter(({ id }) => id !== action.id);\n    \n    \n\n    case \"EDIT_EXPENSE\":\n      return state.map(expense => {\n        if (expense.id === action.id) {\n        \n    \n          return {\n            //using spread operators for objects\n            //this sais take the existing \n            //with the id we gave and overwriting the updates we passed in\n            ...expense,\n            ...action.updates\n          };\n        } else {\n          return expense;\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default expensesReducer;","import moment from 'moment';\n\n\n\nconst filterReducerDefaultState = \n  {\n    text: \"\",\n    sortBy: \"date\",\n    startDate: moment().startOf('month'),\n    endDate: moment().endOf('month')\n  }\n;\n\nexport default (state = filterReducerDefaultState, action) => {\n  switch (action.type) {\n    case \"SET_TEXT_FILTER\":\n      return {\n        ...state,\n        text: action.text\n      };\n\n    case \"SORT_BY_DATE\":\n      return {\n        ...state,\n        sortBy: \"date\"\n      };\n\n    case \"SORT_BY_AMOUNT\":\n      return {\n        ...state,\n        sortBy: \"amount\"\n      };\n\n    case \"SET_START_DATE\":\n      return {\n        ...state,\n        startDate: action.startDate\n      };\n\n    case \"SET_END_DATE\":\n      return {\n        ...state,\n        endDate: action.endDate\n      };\n\n    default:\n      return state;\n  }\n};\n","import ReactDOM from \"react-dom\";\nimport React from 'react';\nimport \"./index.css\";\nimport App from \"./App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Redux2 from './playground/redux-expensify';\nimport configStore from \"../src/store/configStore\";\nimport { addExpense } from \"../src/actions/expenses\";\nimport { setTextFilter } from \"../src/actions/filters\";\nimport getVisibleExpenses from \"../src/selectors/expenses\";\n\n//provider allows us to provide the redux store to all our components\nimport { Provider } from 'react-redux';\n\n//call to the export default function gives us access to the store\n\nconst store = configStore();\n\nstore.dispatch(addExpense({ description: \"water bill\",amount:150,createdAt:4500 }));\nstore.dispatch(addExpense({ description: \"Gas Bill\", amount: 300, createdAt: 1000 }));\nstore.dispatch(\n  addExpense({ description: \"Rent\", amount: 450, createdAt: 1095000 })\n);\n\n\nconst state = store.getState();\nconst visibleExpense = getVisibleExpenses(state.expenses, state.filters);\nconsole.log(visibleExpense);\n \n\n\n\nconst jsx = (\n\n    // by using this now all applications wwill have access to the store\n    <Provider store={store} >\n        <App/>\n    </Provider>\n);\n\n\nReactDOM.render(jsx, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers } from 'redux';\nimport expensesReducer from '../reducers/expenses';\nimport filterReducer from '../reducers/filters';\n\nexport default () => {\n  //Store creation\n  //using combine reducers to register reducers\n  const store = createStore(\n    combineReducers({\n      expenses: expensesReducer,\n      filters: filterReducer\n    }),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n    \n    return store\n};\n\n\n\n\n\n"],"sourceRoot":""}